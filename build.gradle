plugins {
  // Apply the java-library plugin for API and implementation separation.
  id 'java-library'
  id 'org.owasp.dependencycheck' version '8.3.1'
  id 'org.sonarqube' version '4.2.1.3168'
  id 'jacoco'
}

group = 'uk.gov.hmcts'
version = '0.0.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(17)
  }
}

// sourceSets {
//   functionalTest {
//     java {
//       compileClasspath += main.output
//       runtimeClasspath += main.output
//       srcDir file('src/test/java')
//     }
//     resources.srcDir file('src/test/resources')
//   }
// }

// configurations {
//   functionalTestImplementation.extendsFrom testImplementation
//   functionalTestRuntimeOnly.extendsFrom runtimeOnly

//   integrationTestImplementation.extendsFrom testImplementation
//   integrationTestRuntimeOnly.extendsFrom runtimeOnly

//   smokeTestImplementation.extendsFrom testImplementation
//   smokeTestRuntimeOnly.extendsFrom runtimeOnly
// }

tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

test {
  failFast = true
}

// checkstyle {
//   maxWarnings = 0
//   toolVersion = '10.12.0'
//   getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
// }

// pmd {
//   toolVersion = "6.55.0"
//   sourceSets = [sourceSets.main, sourceSets.test]
//   reportsDir = file("$project.buildDir/reports/pmd")
//   // https://github.com/pmd/pmd/issues/876
//   ruleSets = []
//   ruleSetFiles = files("config/pmd/ruleset.xml")
// }

jacocoTestReport {
  // executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    html.required = true
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport

// exclude everything
def sonarExclusions = [
  '**/uk/gov/hmcts/darts/**',
]

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: darts-automation"
    property "sonar.projectKey", "uk.gov.hmcts.reform:darts-automation"
    property "sonar.exclusions", sonarExclusions.join(', ')
  }
}

// before committing a change, make sure task still works
// dependencyUpdates {
//   def isNonStable = { String version ->
//     def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
//     def regex = /^[0-9,.v-]+$/
//     return !stableKeyword && !(version ==~ regex)
//   }
//   rejectVersionIf { selection -> // <---- notice how the closure argument is named
//     return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
//   }
// }

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = 0
  suppressionFile = 'config/owasp/suppressions.xml'

  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
  skipConfigurations = [
    "compileOnly",
    "contractTestRuntimeClasspath",
    "contractTestCompileClasspath"
  ]
}

repositories {
  mavenLocal()
  mavenCentral()
  maven { url 'https://jitpack.io' }
}

ext {
  log4JVersion = "2.20.0"
}

ext['snakeyaml.version'] = '2.0'
ext['spring-security.version'] = '6.0.3' // https://spring.io/security/cve-2023-20862

dependencies {

	implementation(platform("org.apache.logging.log4j:log4j-bom:2.20.0"))
	implementation 'org.apache.logging.log4j:log4j-api'
	implementation 'org.apache.logging.log4j:log4j-core'
//	testImplementation 'org.apache.logging.log4j:log4j-slf4j2-impl'
	
	implementation 'org.seleniumhq.selenium:selenium-java:4.10.0'
	
	implementation(platform("io.cucumber:cucumber-bom:7.12.1"))
	implementation 'io.cucumber:cucumber-picocontainer'
	implementation 'io.cucumber:cucumber-java'
	implementation 'io.cucumber:cucumber-junit'
	implementation 'io.cucumber:cucumber-core'
	implementation 'io.cucumber:cucumber-junit-platform-engine'
	implementation 'io.cucumber:cucumber-gherkin'
	
//	implementation(platform("org.hamcrest:hamcrest-bom:2.2"))
	implementation "org.hamcrest:hamcrest:2.2"
	implementation "org.hamcrest:hamcrest-core:2.2"
	
  implementation 'commons-io:commons-io:2.13.0'

	implementation(platform("org.junit:junit-bom:5.9.3"))
	runtimeOnly    "org.junit.platform:junit-platform-launcher"
	implementation "org.junit.platform:junit-platform-suite"
	implementation "org.junit.jupiter:junit-jupiter-api"
	implementation "org.junit.jupiter:junit-jupiter-engine"
	implementation "org.junit.jupiter:junit-jupiter"

//	implementation "org.slf4j:slf4j-api:2.0.7"
//	implementation "org.slf4j:slf4j-simple:2.0.7"
//	implementation "org.slf4j:log4j-over-slf4j:2.0.7"
	
	implementation group: 'com.opencsv', name: 'opencsv', version: '5.7.1'
	
	implementation group: 'com.oracle.database.jdbc', name: 'ojdbc10', version: '19.19.0.0'	
	
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.6.0'
	
	// Rest assured
	implementation 'io.rest-assured:rest-assured:5.3.1'
	
  // Use JUnit Jupiter for testing.
  testImplementation 'org.junit.jupiter:junit-jupiter:5.9.3'

  // This dependency is exported to consumers, that is to say found on their compile classpath.
  api 'org.apache.commons:commons-math3:3.6.1'

  // This dependency is used internally, and not exposed to consumers on their own compile classpath.
  implementation 'com.google.guava:guava:32.0.1-jre'
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}