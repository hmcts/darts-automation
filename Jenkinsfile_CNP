#!groovy
@Library("Infrastructure") 

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "darts"
def component = "automation"



def secrets = [
  'darts-${env}': [
    secret('api-FUNC-TEST-ROPC-PASSWORD', 'FUNC_TEST_ROPC_USERNAME'),
    secret('api-FUNC-TEST-ROPC-USERNAME', 'FUNC_TEST_ROPC_PASSWORD'),
    secret('AzureAdB2CTenantId', 'AAD_B2C_TENANT_ID'),
    secret('AzureAdB2CClientIdKey', 'AAD_B2C_CLIENT_ID_KEY'),
    secret('AzureAdB2CClientSecretKey', 'AAD_B2C_CLIENT_SECRET_KEY'),
    secret('AzureAdB2CFuncTestROPCGlobalUsername', 'FUNC_TEST_ROPC_GLOBAL_USERNAME'),
    secret('AzureAdB2CFuncTestROPCGlobalPassword', 'FUNC_TEST_ROPC_GLOBAL_PASSWORD'),
    secret('AzureAdB2CFuncTestROPCClientIdKey', 'AAD_B2C_ROPC_CLIENT_ID_KEY'),
    secret('AzureAdB2CFuncTestROPCClientSecretKey', 'AAD_B2C_ROPC_CLIENT_SECRET_KEY'),
    secret('api-POSTGRES-SCHEMA', 'DARTS_API_DB_SCHEMA'),
    secret('api-POSTGRES-HOST', 'DARTS_API_DB_HOST'),
    secret('api-POSTGRES-DATABASE', 'DARTS_API_DB_DATABASE'),
    secret('api-POSTGRES-PORT', 'DARTS_API_DB_PORT'),
    secret('api-POSTGRES-USER', 'DARTS_API_DB_USERNAME'),
    secret('api-POSTGRES-PASS', 'DARTS_API_DB_PASSWORD'),
    secret('AzureStorageConnectionString', 'AZURE_STORAGE_CONNECTION_STRING'),
    secret('AzureADTenantId', 'AAD_TENANT_ID'),
    secret('AzureADClientId', 'AAD_CLIENT_ID'),
    secret('AzureADClientSecret', 'AAD_CLIENT_SECRET'),
    secret('AutomationTestUserName', 'AUTOMATION_USERNAME'),
    secret('AutomationTestPassword', 'AUTOMATION_PASSWORD'),
    secret('DartsTranscriberTestUsername', 'AUTOMATION_TRANSCRIBER_USERNAME'),
    secret('DartsLanguageShopTestUsername', 'AUTOMATION_LANGUAGE_SHOP_TEST_USERNAME'),
    secret('DartsExternalUsersTestPassword', 'AUTOMATION_EXTERNAL_PASSWORD'),
    secret('DartsJudgeTestUsername', 'AUTOMATION_JUDGE_TEST_USERNAME'),
    secret('DartsRequesterTestUsername', 'AUTOMATION_REQUESTER_TEST_USERNAME'),
    secret('DartsApproverTestUsername', 'AUTOMATION_APPROVER_TEST_USERNAME'),
    secret('DartsAppealCourtTestUsername', 'AUTOMATION_APPEAL_COURT_TEST_USERNAME'),
    secret('DartsInternalUserTestPassword', 'AUTOMATION_INTERNAL_PASSWORD'),
    secret('DartsRequesterApproverUsername', 'AUTOMATION_REQUESTER_APPROVER_USERNAME'),
    secret('DartsRequesterApproverPassword', 'AUTOMATION_REQUESTER_APPROVER_PASSWORD'),
    secret('XhibitUserName', 'XHIBIT_USERNAME'),
    secret('XhibitPassword', 'XHIBIT_PASSWORD'),
    secret('CppUserName', 'CPP_USERNAME'),
    secret('CppPassword', 'CPP_PASSWORD'),
    secret('DarMidTierUserName', 'DAR_MID_TIER_USERNAME'),
    secret('DarMidTierPassword', 'DAR_MID_TIER_PASSWORD'),
    secret('DartsAdminUserName', 'DARTS_ADMIN_USERNAME')
  ],
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

GradleBuilder builder = new GradleBuilder(this, product)

// this "Jenkinsfile_CNP" file defines the build to run on PRs and master branch, not nightly
// we are only using the "withNightlyPipeline" function here as it better suits the steps we require e.g. check, build and functional tests
// but rest-assured this will not run nightly, that is defined by the "Jenkinsfile_nightly"
withNightlyPipeline(type, product, component) {
  loadVaultSecrets(secrets)
  enableFullFunctionalTest()
  enableSlackNotifications('#darts-builds')
}
